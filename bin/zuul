#!/usr/bin/env node
const fs = require('fs');

const minimist = require('minimist');

const App = require('../lib/App');

// Enable ANSI colors.
require('colors');

let zuul = new App('zuul');

zuul.register('usage', (app) => {
  return () => {
    console.log('Usage');
    console.log('');
    console.log('zuul <command> [options]');

    let commands = app.get('commands');

    for (const name in commands) {
      if (!commands.hasOwnProperty(name)) {
        continue;
      }

      let command = new commands[name](app);
      console.log('');
      command.usage();
    }
  };
});

zuul.register('init', (app) => {
  const config = app.get('config');

  try {
    fs.statSync(config.dataPath);
  } catch (e) {
    if (e.code === 'ENOENT') {
      fs.mkdirSync(config.dataPath, 0o700);
      fs.mkdirSync(config.getKeysPath());
      fs.mkdirSync(config.getGroupsPath());
      fs.mkdirSync(config.getServersPath());
    }
  }
});

zuul.register('config', () => {
  const Config = require('../lib/Config');
  return new Config(__dirname, 'zuul.json');
});

zuul.register('commands', () => {
  return {
    'key': require('../lib/Command/KeyCommand'),
    'group': require('../lib/Command/GroupCommand'),
    'enroll': require('../lib/Command/EnrollCommand'),
    'server': require('../lib/Command/ServerCommand'),
    'sync': require('../lib/Command/SyncCommand')
  };
});

zuul.register('commandFactory', (app) => {
  let commands = app.get('commands');

  return name => {
    if (!commands[name]) {
      throw new Error('Invalid command: ' + name);
    }

    return new commands[name](app);
  };
});

zuul.register('groups', (app) => {
  const GroupRepo = require('../lib/Repo/GroupRepo');
  let path = app.get('config').getGroupsPath();
  return new GroupRepo(path);
});

zuul.register('keys', (app) => {
  const KeyRepo = require('../lib/Repo/KeyRepo');
  let path = app.get('config').getKeysPath();
  return new KeyRepo(path);
});

zuul.register('servers', (app) => {
  const ServerRepo = require('../lib/Repo/ServerRepo');
  let path = app.get('config').getServersPath();
  return new ServerRepo(path);
});

let args = minimist(process.argv.slice(2));

// Call init once everything is registered.
try {
  zuul.get('init');
} catch (e) {
  console.error((args.verbose ? e.stack : e.message).red);
  process.exit(1);
}

if (args._.length === 0) {
  return zuul.get('usage')();
}

if (args.help) {
  return zuul.get('usage')();
}

let name = args._.shift();
try {
  let command = zuul.get('commandFactory')(name);
  command.execute(args);
} catch (e) {
  console.error((args.verbose ? e.stack : e.message).red);
}
